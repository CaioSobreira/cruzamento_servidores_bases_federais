services:

  web_csbf:
    user: root
    build:
      context: .
      dockerfile: web/Dockerfile
    network_mode: host
    depends_on:
      db_csbf:
        condition: service_healthy
    volumes:
      - ./web:/app
      - ./app/resultados:/app/resultados
      # - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /app
    environment:
      FLASK_APP: main.py
      FLASK_ENV: development
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: ['flask', 'run', '--host=0.0.0.0']


  app_csbf :
    user: root
    build:
      context: .
      dockerfile: app/Dockerfile
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./app/servidores:/app/servidores
      - ./app/resultados:/app/resultados
    depends_on:
      db_csbf:
        condition: service_healthy
    network_mode: host


  db_csbf:
    build: ./database/
    env_file:
      - ./.env
    ports:
      - "5432:5432"
    command: >
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    volumes:
      # - ./pgdata:/var/lib/postgresql/data
      - ./database/create_db.sql:/docker-entrypoint-initdb.d/create_db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    network_mode: host



# POSTGRES_HOST=localhost
# POSTGRES_PORT=5432
# POSTGRES_USER=postgres
# POSTGRES_PASSWORD=postgres_pwd
# POSTGRES_DB=bd_benef_federais
